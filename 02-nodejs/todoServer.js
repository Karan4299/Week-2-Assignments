/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const _ = require('lodash');
const app = express();
const fs = require('fs');
const PORT = 3000;

app.use(bodyParser.json());


app.get('/todos/:id', (req, res) => {
  fs.readFile('./todo.json', (err, data) => {
    if (err) throw err;
    const fileID = req.params.id;
    const todo = _.find(JSON.parse(data), (obj) => obj.id == fileID)

    res.send(todo);
  })
})

app.post('/todos', (req, res) => {
  const {title, description} = req.body;
  const newTodo = {
    id: Math.floor(Math.random() * 1000000), // unique random id
    title: title,
    description: description,
    completed: false
  }
  fs.readFile('./todo.json', (err, data) => {
    if (err) throw err;

    const newList = [
      ...JSON.parse(data),
      newTodo
    ]

    fs.writeFile('./todo.json', JSON.stringify(newList), (err) => {
      if (err) {
        console.error('Error creating file:', err);
        res.status(500).send('Error creating file');
      } else {
        res.send('File created successfully');
      }
    })
  })
})

app.put('/todos/:id', (req, res) => {
  const {title, completed} = req.body;
  fs.readFile('./todo.json', (err, data) => {
    if (err) throw err;
    const fileID = req.params.id;
    const fileList = JSON.parse(data);
    const todoIndex = _.findIndex(fileList, (obj) => {
      return obj.id == fileID
    })
    console.log(todoIndex);
    if (todoIndex === undefined) res.status(404).send("Task not found");

    const newTodo = {
      ...fileList[todoIndex],
      completed: completed
    }

    const newList = [
      ...fileList.slice(0, todoIndex),
      newTodo,
      ...fileList.slice(todoIndex + 1)
    ]

    fs.writeFile('./todo.json', JSON.stringify(newList), (err) => {
      if (err) {
        console.error('Error creating file:', err);
        res.status(500).send('Error creating file');
      } else {
        res.send('File updated successfully');
      }
    })
  })
})

app.delete('/todos/:id', (req, res) => {
  fs.readFile('./todo.json', (err, data) => {
    if (err) throw err;
    const fileID = req.params.id;
    const fileList = JSON.parse(data);
    const todoIndex = _.findIndex(fileList, (obj) => {
      return obj.id == fileID
    })
    if (todoIndex === undefined) res.status(404).send("Task not found");


    const newList = [
      ...fileList.slice(0, todoIndex),
      ...fileList.slice(todoIndex + 1)
    ]

    fs.writeFile('./todo.json', JSON.stringify(newList), (err) => {
      if (err) {
        console.error('Error creating file:', err);
        res.status(500).send('Error creating file');
      } else {
        res.send('File deleted successfully');
      }
    })
  })
})

app.all('*', (req, res) => {
  res.status(404).send('Route not found');
})

app.listen(PORT, (req, res) => {
  // fs.writeFile('./todo.json', JSON.stringify([]), (err) => {
  //   if (err) {
  //     console.error('Error creating file:', err);
  //     res.status(500).send('Error creating blank array');
  //   } else {
      console.log("Listening on port ",PORT);
      // res.send('File created successfully');
  //   }
  // })
})

module.exports = app;
